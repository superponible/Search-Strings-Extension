#!/usr/bin/perl

# Written by: Dave Lassalle, @superponible
# Additional code and ideas by: Hal Pomeranz
# 
# A wrapper around srch_strings.  This can be used in place of srch_strings,
#   and will forward all command line options to srch_strings.  If -b
#   or -d is specified along with "-t d", the additional functionality of
#   this script is available; otherwise, it will just run as normal.

#TODO
#Group output
# handle swap space but print differently
#-o in such_blk script.
#option to automatically carve unallocated blocks on a match, warn about time, use on dirty word
#use fib to recover file based on block found

use strict;
use Getopt::Std;

my $scriptname = "srch_strings_wrap";

# filesystem commands used in script
my $srch_strings_cmd = "/usr/local/bin/srch_strings";
my $blkstat_cmd = "/usr/local/bin/blkstat";
my $fsstat_cmd = "/usr/local/bin/fsstat";
my $ifind_cmd = "/usr/local/bin/ifind";
my $istat_cmd = "/usr/local/bin/istat";
my $ffind_cmd = "/usr/local/bin/ffind";
my $mmls_cmd = "/usr/local/bin/mmls";
my $dd_cmd = "/bin/dd";
my $grep_cmd = "/bin/grep";

my @original_args = @ARGV;
my %opts = ();
getopts('hb:dHF:Cg:G:il:AI:afn:t:oe:v', \%opts) || die usage();
my @files = @ARGV;				# should be the file arguments

# set up some default values
my $blksize = 0;
my $base = "";
my $delim = "\t";
my $level = 3;
my $dd_skip = "";
my $dd_count = "";
my $img_type = "F";
my $grep_case = "";
my $grep_srch_cmd = "";
my $csv = "";

parse_opts(\%opts,\$blksize,\$base,\$delim,\$level,\$grep_case,\$grep_srch_cmd,\$img_type,\$csv);

if (!$opts{'d'} && !$opts{'b'} || !$opts{'d'} && $blksize == 1) {
	# no -d or -b, or no -d and -b invalid, so run regular srch_strings 
	#    with other arguments
	my $ss_cmd = "$srch_strings_cmd @original_args";
	open (SS, "$ss_cmd |") or die "$ss_cmd: $!\n";
	print while (<SS>);
	close SS;
} else {
	check_base($base);		# check that -t d was specified

	# Get argument list to pass to srch_strings
	my $srch_strings_args = strip_custom_args($files[0], @original_args);
	
	print_header(\%opts,\$csv,\$delim) if ($opts{'H'});

	# loop through each of the file arguments at the end of the command line
	foreach (@files) {
		# set up some default values
		my $file = $_;
		my %status = ();		# tracks allocated/not allocated block status
		my %inode = ();			# tracks inodes of blocks
		my %istatus = ();		# tracks allocated/not allocated inode status
		my %filename = ();		# tracks filenames
		my $sector = 512;
		my %part_skip = ("00",0);
		my %part_count = ("00","9999999999999999999");

		get_partition_info($file,\$sector,\%part_skip,\%part_count) if ($img_type eq "D");

		# loop through each partition of disk image, or just the one filesystem in a partition image
		while (my ($key,$val) = each(%part_skip)) {
			# if -d specified, use fsstat to get block size
			my $fs_cmd = "$fsstat_cmd -o $part_skip{$key} $file\n";
			$blksize = get_block_size($fs_cmd) if ($opts{'d'});

			# run srch_strings with arguments and pipe output
			my $ss_cmd = "$dd_cmd if=$file skip=$part_skip{$key} status=noxfer bs=$sector count=$part_count{$key} 2>/dev/null | $srch_strings_cmd $srch_strings_args $grep_srch_cmd";
			open (SS_OUT, "$ss_cmd |") || die "$ss_cmd: $!\n";
	
			# loop through search strings output
			while (<SS_OUT>) {
				# parse srch_strings output, if -f specified, handle additional column
				my ($filename, $bytes, $string) = escape_strings($opts{'f'},$_);

				# CSV output so replace single quote with double in string column
				$string =~ s/\"/\"\"/g if ($opts{'C'});

				my $blk = int($bytes/$blksize);
				my $blk_offset = $bytes%$blksize;
			
				my $bs_cmd = "$blkstat_cmd -o $part_skip{$key} $file $blk";
				$status{$blk} = get_block_allocation_status($level,$bs_cmd) unless (length($status{$blk}));	

				# get inode number for block
				if ($level > 1) {
					my $if_cmd = "$ifind_cmd -o $part_skip{$key} $file -d $blk";
					$inode{$blk} = get_inode($if_cmd) unless (length($inode{$blk}));

					my $is_cmd = "$istat_cmd -o $part_skip{$key} $file $inode{$blk}";
					$istatus{$inode{$blk}} = get_inode_allocation_status($is_cmd,$inode{$blk}) unless (length($istatus{$inode{$blk}}));
				}

				# get filename
				if ($level > 2) {
					my $ff_cmd = "$ffind_cmd -o $part_skip{$key} $file $inode{$blk}";
					$filename{$inode{$blk}} = get_filename($ff_cmd,$inode{$blk}) unless (length($filename{$inode{$blk}}));
				}

				# print srch_strings output with additional fields
				print_output(\%opts,$file,$key,$filename{$inode{$blk}},$istatus{$inode{$blk}},
					     $inode{$blk},$status{$blk},$blk,$blk_offset,$bytes,$string,
				 	     $delim,$csv,$level);
			}
			close SS_OUT;
		}
	}
}

exit 0;
	
#############################################################
# Subroutines
#############################################################

# print usage statement
sub usage {
	print <<EOF;
usage: $scriptname [OPTION(s)] [FILE(s)]

$scriptname is a wrapper for the srch_strings command and can be used in its place.
	Must give -b or -d, plus "-t d" options for extra functionality.
Basic example: $scriptname -d -a -t d file.img

OPTIONS (wrapper specific):
   -h      	     Print this help message
   -b blocksize      block size of filesystem in imagefile(s)
   -d		     Determine block size of each file argument using fsstat
   -H 		     Print a header line
   -F delim  	     Delimiter in output, default is tab 
   -C		     Output in CSV, with quotes to handle spaces
   -g string	     string to pass to grep to limit results
   -G file	     file of dirty words to pass to grep to limit results
   -i		     ignore case on grep
   -l level	     level of layers to lookup into
			0 = print just like srch_strings, able to separate partitions in disk image
			1 = print block and block allocation status
			2 = print inode and inode allocation status
			3 = print filename
   -A 		     autorecover - TODO
   -I type	     image type, all files must be same type
			D = Disk, use mmls to find filesystems
			F = Filesystem, default

OPTIONS (standard srch_strings options)
   -a -              Scan the entire file, not just the data section
   -f     	     Print the name of the file before each string
   -n number         Locate & print any NUL-terminated sequence of at
			least [number] characters (default 4).
   -<number>         DOES NOT WORK WITH WRAPPER 
   -t {o,x,d}        Print the location of the string in base 8, 10 or 16
   -o                An alias for --radix=o
   -e {s,S,b,l,B,L}  Select character size and endianness:
                        s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit
   -h                Display this information
   -v                Print the program's version number

EOF
}

sub strip_custom_args {
	# return argument list to pass to srch_strings
	my ($first, @args) = @_;
	my $skip = 0;
	my $srch_strings_args = "";
	foreach (@args) {
		if (/-[bFgGlI]/) {
			# skip -b, -F, -g, -G, -l, -I and next argument
			$skip = 1;
		} elsif ($skip == 1 || /-[dHCAi]/) {
			# skip argument after -b or skip -d, -H, -C, -A, -i
			$skip = 0;
		} elsif ($_ eq $first) {
			# match the first file argument, so stop
			last;
		} else {
			# add current arg to new list
			$srch_strings_args = $srch_strings_args . " $_";
		} 
	}
	return $srch_strings_args;
}

sub parse_opts {
	my ($opts_ref,$blksize,$base,$delim,$level,$grep_case,$grep_srch_cmd,$img_type,$csv) = @_;
	my $opts = %$opts_ref;	

	# help flag given
	if ($opts{'h'} == 1) {
		usage();
		exit(1);
	}
	#blocksize specifed
	if ($opts{'b'}) {
		$$blksize = $opts{'b'};
		# -b given with no argument
		if ($$blksize =~ /^-|[^\d]/) {
			usage();
			exit(1);
		}
	}
	# -t specified, store base in $base
	$$base = $opts{'t'} if ($opts{'t'});
	
	# custom delimiter specified
	$$delim = $opts{'F'} if ($opts{'F'});
	
	# level of lookup to perform
	$$level = $opts{'l'} if defined($opts{'l'});
	if ($$level < 0 || $$level > 3) {
		usage();
		exit(1);
	}
	
	$$grep_case = " -i " if ($opts{'i'});

	if ($opts{'g'} && $opts{'G'}) {
		usage();
		exit(1);
	} elsif ($opts{'g'}) {
		$$grep_srch_cmd = " | $grep_cmd $$grep_case '$opts{'g'}'"; 
	} elsif ($opts{'G'}) {
		$$grep_srch_cmd = " | $grep_cmd $$grep_case -f '$opts{'G'}'";
	}
	
	
	# set img type to Disk or Filesystem, F is default
	$$img_type = $opts{'I'} if ($opts{'I'});
	if ($$img_type ne "D" && $$img_type ne "F") {
		usage();
		exit(1);
	}
	
	# csv mode, set delimiter to comma
	if ($opts{'C'}) {
		$$delim = ",";
		$$csv = "\"";
	}
}

sub check_base {
	my $base = $_[0];
	# either valid -b or -d specified
	if ($base ne "d") {
		# base was not decimal
		print "Must use \"-t d\" with -b or -d option.\n\n";
		usage();
		exit(1);
	}
}

sub print_header {
	my ($opts_ref,$csv_ref,$delim_ref) = @_;
	my $opts = %$opts_ref;
	my $csv = $$csv_ref;
	my $delim_ref = $$delim_ref;

	my $imagename_print = "";
	$imagename_print = "${csv}IMG FILE${csv}${delim}" if ($opts{'f'});
	
	my $partition_print = "";
	$partition_print = "${csv}PARTITION${csv}${delim}" if ($opts{'I'} eq "D");

	my $filename_print = "${csv}FILENAME${csv}${delim}" if ($level > 2);
	my $istatus_print = "${csv}I_STATUS${csv}${delim}" if ($level > 1);
	my $inode_print = "${csv}INODE${csv}${delim}" if ($level > 1);
	my $status_print = "${csv}B_STATUS${csv}${delim}" if ($level > 0); 
	my $blk_print = "${csv}BLOCK${csv}${delim}" if ($level > 0);
	my $blk_offset_print = "${csv}B_OFFSET${csv}${delim}" if ($level > 0);

	print "${imagename_print}${partition_print}${filename_print}${istatus_print}${inode_print}${status_print}${blk_print}${blk_offset_print}${csv}BYTE OFFSET${csv}${delim}${csv}STRING${csv}\n";
}

sub escape_strings {
	my ($opt_f,$line) = @_;
	if ($opts{'f'}) {
		my ($filename,$bytes,$string) = /^\s*(.+?):\s+(\d+)\s+(.*)$/;
		return ($filename, $bytes, $string);
	} else {
		my ($bytes,$string) = /^\s*(\d+)\s+(.*)$/;
		return ("", $bytes, $string);
	}
}

sub get_partition_info {
	my ($file,$sector,$part_skip_ref,$part_count_ref) = @_;
	my $mm_cmd = "$mmls_cmd $file";

	delete(%$part_skip_ref->{"00"});
	delete(%$part_count_ref->{"00"});
		
	open (MM_OUT, "$mm_cmd |") || die "$mm_cmd: $!\n";
	while (<MM_OUT>) {
		next if (/\(0x82\)$/);
		if (m/^Units are in (\d+)-byte/) {
			$$sector = $1;
		} elsif (m/\s+(\d+):00\s+(\d+)\s+\d+\s+(\d+)/) {
			%$part_skip_ref->{$1} = $2;
			%$part_count_ref->{$1} = $3;
		}
	}
	close MM_OUT;
}

sub get_block_size {
	my ($fs_cmd) = @_;
	open (FS, "$fs_cmd |") || die "$fs_cmd: $!\n";
	while (<FS>) {
		next unless (/(Cluster|Block) Size: (\d+)/);
		close FS;
		return($2)
	}
}

sub get_block_allocation_status {
	my ($level,$bs_cmd) = @_;
	my $status;

	# get block allocation status
	if ($level > 0) {
		open(BS, "$bs_cmd |") || die "$bs_cmd: $!\n";
		while (<BS>) {
			next unless (/Allocated/);
			($status = $_) =~ s/[^NA]//g;
			close BS;
			return $status;
		}
	}
}
	
sub get_inode {
	my ($if_cmd) = @_;
	my $inode = ""; 
	open(IF, "$if_cmd |") || die "$if_cmd: $!\n";
	while (<IF>) {
		next unless (/\d+|Inode not found/);
		chomp;
		close IF;
		if (/^I/) {
			return "NF";
		} else {
			return $_;
		}
	}
}
				
sub get_inode_allocation_status {
	my ($is_cmd,$inode) = @_;
	my $istatus = "";

	# get inode allocation status
	if ($inode eq "NF") {
		return "NF";
	} else {
		open(IS, "$is_cmd |") || die "$is_cmd: $!\n";
		while (<IS>) {
			next unless (/Allocated/);
			($istatus = $_) =~ s/[^NA]//g;
			close IS;
			return $istatus;
		}
	}
}	
	
sub get_filename {
	my ($ff_cmd,$inode) = @_;
	if ($inode ne "NF") {
               	open(FF, "$ff_cmd |") || die "$ff_cmd: $!\n";
           	while (<FF>) {
               		chomp;
			s/^\* /DELETED\//;
			close FF;
               		return $_;
               	}
	} else {
		return "FILENAME_NF";
	}
}
	
sub print_output {
	my ($opts_ref,$file,$key,$filename,$istatus,$inode,$status,$blk,$blk_offset,$bytes,$string,$delim,$csv,$level) = @_;
	my $opts = %$opts_ref;

	my $imagename_print = "";
	$imagename_print = "${csv}${file}${csv}${delim}" if ($opts{'f'});

	my $partition_print = "";
	$partition_print = "${csv}${key}${csv}${delim}" if ($opts{'I'} eq "D");
	
	my $filename_print = "${csv}${filename}${csv}${delim}" if ($level > 2);
	my $istatus_print = "${csv}${istatus}${csv}${delim}" if ($level > 1);
	my $inode_print = "${csv}${inode}${csv}${delim}" if ($level > 1);
	my $status_print = "${csv}${status}${csv}${delim}" if ($level > 0); 
	my $blk_print = "${csv}${blk}${csv}${delim}" if ($level > 0);
	my $blk_offset_print = "${csv}${blk_offset}${csv}${delim}" if ($level > 0);

	print "${imagename_print}${partition_print}${filename_print}${istatus_print}${inode_print}${status_print}${blk_print}${blk_offset_print}${csv}${bytes}${csv}${delim}${csv}${string}${csv}\n";
}
